entities-sink {
  # Possible values: RabbitMQ, Kafka
  sink = "rabbitmq"
}

elb-guineaPig {
  destinationUrl = "http://nv-l2-elb-ext-spray-01-1131161994.us-east-1.elb.amazonaws.com"
}

kafka-guineaPig {
  properties {
    "bootstrap.servers" = "172.18.7.61:9092,172.18.7.62:9092,172.18.7.630:9092"
    "zookeeper.session.timeout.ms" = "12000"
    "failOnDataLoss" = "false"
    "maxOffsetsPerTrigger" = 100000
    "value.serializer" = "org.apache.kafka.common.serialization.StringSerializer"
    "key.serializer" = "org.apache.kafka.common.serialization.StringSerializer"
    "acks" = "0"
    "block.on.buffer.full" = false
  }
  topic: "prod_entities"
}

rabbit-guineaPig {
  host = "172.18.7.11"
  port = 5672
  entity-exchange-name = "EntityCreator.PageView"
  virtual-host = "/"
  user-name = "dev"
  password = "u5au6EcHu1c6vRsKKvvW"
  tpe = "topic"
  number-of-producers = 5
}



visit {
  visit-timeout-milliseconds = 30000
}

metrics {
  looping-interval-milliseconds = "12000"
  max-engagement-time-milliseconds = "4200000"

  page-tags {
    max = "10"
    max-value-length = "50"
  }

  campaign-data {
    max-content-length = "20"
    max-marketing-channel-length = "20"
    max-name-length = "20"
  }

  page-actions {
    max-name-length = "20"
  }

  ab-test {
    max-vendor-length = "20"
    max-experience-name-length = "20"
  }
}


rabbit-akka {

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-dead-letters = 10
  log-dead-letters-during-shutdown = on
  log-config-on-start = on

  actor {
    debug {
      # enable function of LoggingReceive, which is to log any received message at
      # DEBUG level
      receive = on
    }
  }

  default-mailbox {
    # FQCN of the MailboxType. The Class of the FQCN must have a public
    # constructor with
    # (akka.actor.ActorSystem.Settings, com.typesafe.config.Config) parameters.
    mailbox-type = "akka.dispatch.UnboundedMailbox"

    # If the mailbox is bounded then it uses this setting to determine its
    # capacity. The provided value must be positive.
    # NOTICE:
    # Up to version 2.1 the mailbox type was determined based on this setting;
    # this is no longer the case, the type must explicitly be a bounded mailbox.
    #mailbox-capacity = 10000000

    # If the mailbox is bounded then this is the timeout for enqueueing
    # in case the mailbox is full. Negative values signify infinite
    # timeout, which should be avoided as it bears the risk of dead-lock.
    mailbox-push-timeout-time = 10s

    # For Actor with Stash: The default capacity of the stash.
    # If negative (or zero) then an unbounded stash is used (default)
    # If positive then a bounded stash is used and the capacity is set using
    # the property
    stash-capacity = -1
  }
}